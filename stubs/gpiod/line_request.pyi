from collections.abc import Iterable
from datetime import timedelta
from typing import Any

from .edge_event import EdgeEvent
from .line import Value
from .line_settings import LineSettings

__all__ = ["LineRequest"]

class LineRequest:
    def __init__(self, req: Any): ...
    def _check_released(self) -> None: ...
    def release(self) -> None: ...
    def get_value(self, line: int | str) -> Value: ...
    def _line_to_offset(self, line: int | str) -> int: ...
    def get_values(self, lines: Iterable[int | str] | None = None) -> list[Value]: ...
    def set_value(self, line: int | str, value: Value) -> None: ...
    def set_values(self, values: dict[int | str, Value]) -> None: ...
    def reconfigure_lines(
        self,
        config: dict[Iterable[int | str] | int | str, LineSettings | None],
    ) -> None: ...
    def wait_edge_events(self, timeout: timedelta | float | None = None) -> bool: ...
    def read_edge_events(self, max_events: int | None = None) -> list[EdgeEvent]: ...
    def fileno(self) -> int: ...
    @property
    def chip_name(self) -> str: ...
    @property
    def num_lines(self) -> int: ...
    @property
    def offsets(self) -> list[int]: ...
    @property
    def lines(self) -> list[int | str]: ...
    @property
    def fd(self) -> int: ...
